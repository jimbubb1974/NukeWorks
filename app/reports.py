"""Simple report generation utilities.

Provides ProjectSummaryReport with a build() method that returns PDF bytes.
This is a minimal implementation using ReportLab so the application can import
`app.reports.ProjectSummaryReport` and produce a basic PDF. It intentionally
keeps formatting simple and safe for testing and local usage.
"""
from io import BytesIO
from datetime import datetime

from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer


class ProjectSummaryReport:
    def __init__(self, project, user=None, include_confidential=False, generated_by=None, generated_date=None):
        self.project = project
        self.user = user
        self.include_confidential = include_confidential
        self.generated_by = generated_by or (getattr(user, 'username', None) if user is not None else 'unknown')
        self.generated_date = generated_date or datetime.utcnow()

    def build(self) -> bytes:
        """Return a PDF document as bytes containing a simple project summary."""
        buf = BytesIO()
        doc = SimpleDocTemplate(buf, pagesize=letter)
        styles = getSampleStyleSheet()

        story = []

        title = f"Project Summary: {getattr(self.project, 'project_name', 'Unnamed Project')}"
        story.append(Paragraph(title, styles['Title']))
        story.append(Spacer(1, 12))

        meta = f"Project ID: {getattr(self.project, 'id', '')}"
        story.append(Paragraph(meta, styles['Normal']))
        story.append(Spacer(1, 8))

        gen = f"Generated by: {self.generated_by} on {self.generated_date.isoformat()}"
        story.append(Paragraph(gen, styles['Normal']))
        story.append(Spacer(1, 12))

        # Add a few basic project fields if present
        fields = [
            ('Name', getattr(self.project, 'project_name', '')),
            ('Description', getattr(self.project, 'project_description', '')),
            ('Start Date', getattr(self.project, 'start_date', '')),
            ('End Date', getattr(self.project, 'end_date', '')),
        ]

        for label, value in fields:
            if value:
                story.append(Paragraph(f"<b>{label}:</b> {value}", styles['Normal']))
                story.append(Spacer(1, 6))

        if self.include_confidential:
            story.append(Spacer(1, 12))
            story.append(Paragraph("Confidential data included.", styles['Italic']))

        doc.build(story)
        pdf = buf.getvalue()
        buf.close()
        return pdf
